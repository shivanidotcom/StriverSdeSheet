// class Node  
// { 
//     int data; 
//     Node left, right; 
   
//     public Node(int d)  
//     { 
//         data = d; 
//         left = right = null; 
//     } 
// }

class Solution
{
    public boolean isLeaf(Node root){
        return (root.left == null && root.right==null);
    }
    public void addLeft(Node root,ArrayList<Integer> res){
        Node curr=root.left;
        while(curr!=null){
            if(isLeaf(curr)==false){
            res.add(curr.data);
            }
            if(curr.left!=null) curr=curr.left;
            else curr=curr.right;
        }
    }
    public void addLeaves(Node root,ArrayList<Integer> res){
        if(isLeaf(root)){
            res.add(root.data);
            return;
        }
        if(root.left!=null) addLeaves(root.left,res);
        if(root.right!=null) addLeaves(root.right,res);
    }
    public void addRight(Node root,ArrayList<Integer> res){
        Node curr=root.right;
        ArrayList<Integer> tmp=new ArrayList<>();
        while(curr!=null){
                if(isLeaf(curr)==false){
                tmp.add(curr.data);
            }
            if(curr.right!=null) curr=curr.right;
            else curr=curr.left;
        }
        Collections.reverse(tmp);
        res.addAll(tmp);
    }
    public void printBoundary(Node root,ArrayList<Integer> res){
        if(isLeaf(root)==false){
            res.add(root.data);
        }
        addLeft(root,res);
        addLeaves(root,res);
        addRight(root,res);
        return ;
    }
	ArrayList <Integer> boundary(Node node)
	{
	    ArrayList<Integer> res=new ArrayList<>();
	    printBoundary(node,res);
	 //   System.out.println(res);
	    return res;
	}
}
