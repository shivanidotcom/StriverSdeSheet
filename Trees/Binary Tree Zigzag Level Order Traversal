Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 
 
 =========================================================
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res=new ArrayList<>();
        if(root==null) return res;
        
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        int pointer=0;
        while(q.isEmpty()==false){
            pointer++;
            List<Integer> al=new ArrayList<>();
            int count= q.size();
            System.out.println(count+" -- "+(count%2));
           
                for(int i=0;i<count;i++){
                    TreeNode curr=q.poll();
                    al.add(curr.val);
                    if(curr.left!=null) q.add(curr.left);
                    if(curr.right!=null) q.add(curr.right);
                }
           if(pointer%2==0){
               Collections.reverse(al);
                res.add(al);
           }
            else{
                res.add(al);
            }
        }
        return res;
    }
}
//time complexity = o(n)
//space complexity=o(n)
