
class Solution
{
    //Function to return list containing vertices in Topological order. 
   static void topologicalSortUtil(int v, boolean visited[],
                             Stack<Integer> stack, ArrayList<ArrayList<Integer>> adj)
    {
        // Mark the current node as visited.
        visited[v] = true;
        Integer i;
 
        // Recur for all the vertices adjacent
        // to thisvertex
        Iterator<Integer> it = adj.get(v).iterator();
        while (it.hasNext()) {
            i = it.next();
            if (!visited[i])
                topologicalSortUtil(i, visited, stack,adj);
        }
 
        // Push current vertex to stack
        // which stores result
        stack.push(new Integer(v));
    }
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        // DFS based solution
       Stack<Integer> stack = new Stack<Integer>();
 
        // Mark all the vertices as not visited
        boolean visited[] = new boolean[V];
        for (int i = 0; i < V; i++)
            visited[i] = false;
 
        // Call the recursive helper
        // function to store
        // Topological Sort starting
        // from all vertices one by one
        for (int i = 0; i < V; i++)
            if (visited[i] == false)
                topologicalSortUtil(i, visited, stack,adj);
 
        //System.out.println(stack);
        int[] arr=new int[V]; int i=0;
        while(stack.isEmpty()==false){
            //int val=stack.pop();
            arr[i++]=stack.pop();
        }
        return arr;
    }
}


// time complexity is O(V+E)
