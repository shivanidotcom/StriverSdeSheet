You are given a connected undirected graph. Perform a Depth First Traversal of the graph.
Note: Use a recursive approach to find the DFS traversal of the graph starting from the 0th vertex from left to right according to the graph.


Example 1:

Input:

Output: 0 2 4 3 1
Explanation: 
0 is connected to 2, 3, 1.
1 is connected to 0.
2 is connected to 0 and 4.
3 is connected to 0.
4 is connected to 2.
so starting from 0, it will go to 2 then 4,
and then 3 and 1.
Thus dfs will be 0 1 2 4 3.
Example 2:

Input:

Output: 0 1 2 3
Explanation:
0 is connected to 1 , 3.
1 is connected to 0, 2. 
2 is connected to 1.
3 is connected to 0. 
so starting from 0, it will go to 1 then 2
then back to 0 then 0 to 3
thus dfs will be 0 1 2 3. 

=================================================


class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] visited=new boolean[V];
        ArrayList<Integer> al=new ArrayList<>();
        for(int i=0;i<V;i++){
            if(visited[i]==false){
               al= DFSVisit(adj,V,i,visited,al);
            }
        }
        return al;
    }
    private ArrayList<Integer> DFSVisit(ArrayList<ArrayList<Integer>> adj, int V,int i,boolean[] visited,ArrayList<Integer> al){
        visited[i]=true;
        
        al.add(i);
        for(Integer u:adj.get(i)){
            if(visited[u]==false){
                DFSVisit(adj,V,u,visited,al);
            }
        }
        return al;
    }
}
