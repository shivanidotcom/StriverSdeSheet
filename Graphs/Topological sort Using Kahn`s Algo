Given a Directed Acyclic Graph (DAG) with V vertices and E edges, Find any Topological Sorting of that Graph.


Example 1:

Input:

Output:
1
Explanation:
The output 1 denotes that the order is
valid. So, if you have, implemented
your function correctly, then output
would be 1 for all test cases.
One possible Topological order for the
graph is 3, 2, 1, 0.
Example 2:

Input:

Output:
1
Explanation:
The output 1 denotes that the order is
valid. So, if you have, implemented
your function correctly, then output
would be 1 for all test cases.
One possible Topological order for the
graph is 5, 4, 2, 1, 3, 0.


=======================================================


class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        int[] indegree=new int[V];
        int[] topoOrder=new int[V];
         for (int i = 0; i < V; i++) {
           for(int u:adj.get(i)){
               indegree[u]++;
           }
        }
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        int count=0;
        while(!q.isEmpty()){
            int curr=q.poll();
            topoOrder[count++]=curr;
            for(int u:adj.get(curr)){
                indegree[u]--;
                if(indegree[u]==0){
                    q.add(u);
                }
            }
            
        }
        return topoOrder;
    }
}
//time complexity is O(V+E)
//space complexity is O(V)
