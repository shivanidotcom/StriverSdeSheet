Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. 

Example 1:

Input:  
V = 5, E = 5
adj = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}} 
Output: 1
Explanation: 

1->2->3->4->1 is a cycle.
Example 2:

Input: 
V = 4, E = 2
adj = {{}, {2}, {1, 3}, {2}}
Output: 0
Explanation: 

No cycle in the graph.

====================================

DFS based approach of time complexity= O(V+E)

========================================

class Solution {
    // Function to detect cycle in an undirected graph.
    private boolean DFSVisit(ArrayList<ArrayList<Integer>> adj,int s,boolean[] visited,int parent){
        visited[s]=true;
        for(int u:adj.get(s)){
            if(visited[u]==false){
                if(DFSVisit(adj,u,visited,s)) return true;
            }else if(u!=parent){
                return true;
            }
        }
        return false;
    }
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] visited=new boolean[V];
        Arrays.fill(visited, Boolean.FALSE);
        for(int i=0;i<V;i++){
            if(visited[i]==false){
               if(DFSVisit(adj,i,visited,-1)) return true;
            }
        }
        return false;
    }
}
