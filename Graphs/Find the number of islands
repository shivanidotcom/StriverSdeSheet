Given a grid of size n*m (n is the number of rows and m is the number of columns in the grid) consisting of '0's (Water) and '1's(Land). Find the number of islands.

Note: An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.

Example 1:

Input:
grid = {{0,1},{1,0},{1,1},{1,0}}
Output:
1
Explanation:
The grid is-
0 1
1 0
1 1
1 0
All lands are connected.
Example 2:

Input:
grid = {{0,1,1,1,0,0,0},{0,0,1,1,0,1,0}}
Output:
2
Expanation:
The grid is-
0 1 1 1 0 0 0
0 0 1 1 0 1 0 
There are two islands :- one is colored in blue 
and other in orange.

****************************************


class Solution {
    // Function to find the number of islands.
    public int numIslands(char[][] grid) {
        // Code here
        int count=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                if(grid[i][j]=='1'){
                    bfsVisit(grid,i,j);
                    count++;
                }
            }
        }
        return count;
    }
    private void bfsVisit(char[][] grid,int row,int col){
        if(row<0 || row==grid.length || col<0 || col==grid[0].length || grid[row][col]!='1'){
            return ;
        }
        grid[row][col]='m'; // this node is visited;
        // for horizantal and vertical case;
        bfsVisit(grid,row+1,col);
        bfsVisit(grid,row-1,col);
        bfsVisit(grid,row,col+1);
        bfsVisit(grid,row,col-1);
        //diagonal case;
        bfsVisit(grid,row+1,col+1);
        bfsVisit(grid,row+1,col-1);
        bfsVisit(grid,row-1,col+1);
        bfsVisit(grid,row-1,col-1);
    }
}
//time complexiy O(row*col)
//space complexity O(1) bcoz we are not using any extra space
