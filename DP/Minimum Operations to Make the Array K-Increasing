Example 1:

Input: arr = [5,4,3,2,1], k = 1
Output: 4
Explanation:
For k = 1, the resultant array has to be non-decreasing.
Some of the K-increasing arrays that can be formed are [5,6,7,8,9], [1,1,1,1,1], [2,2,3,4,4]. All of them require 4 operations.
It is suboptimal to change the array to, for example, [6,7,8,9,10] because it would take 5 operations.
It can be shown that we cannot make the array K-increasing in less than 4 operations.
Example 2:

Input: arr = [4,1,5,2,6,2], k = 2
Output: 0
Explanation:
This is the same example as the one in the problem description.
Here, for every index i where 2 <= i <= 5, arr[i-2] <= arr[i].
Since the given array is already K-increasing, we do not need to perform any operations.

============================================================

class Solution {
    public int kIncreasing(int[] arr, int k) {
        // LIS
        
       int longest = 0;
        for (int i = 0; i < k; ++i) {
            List<Integer> al = new ArrayList<>();
            for (int j = i; j < arr.length; j += k){
                if (al.isEmpty() || al.get(al.size() - 1) <= arr[j])
                   { al.add(arr[j]);}
                else
                    {al.set(ceilIndex(al, arr[j]), arr[j]);}}
            longest += al.size();
        }
       return arr.length - longest;
    }
    public int ceilIndex(List<Integer> al , int x){
        int l = 0, r = al.size() - 1;
    while (l < r) {
        int m = (l + r) / 2;
        if (al.get(m) <= x)
            l = m + 1;
        else
            r = m;
    }
    return l;
    }
}
