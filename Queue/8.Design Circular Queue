class MyCircularQueue {
    
   ArrayList<Integer> al;
    int cap;
    public MyCircularQueue(int k) {
        cap=k;
        al=new ArrayList<>();
    }
    
    public boolean enQueue(int value) {
        if(isFull()) return false;
        al.add(value);
        return true;
    }
    
    public boolean deQueue() {
        if(isEmpty()) return false;
        al.remove(0);
        return true;
    }
    
    public int Front() {
        if(isEmpty()) return -1;
        return al.get(0);    
    }
    
    public int Rear() {
        if(isEmpty()) return -1;
        return al.get(al.size()-1);
    }
    
    public boolean isEmpty() {
        if(al.size()==0) return true;
        return false;
    }
    
    public boolean isFull() {
        if(al.size()==cap) return true;
        return false;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
 
